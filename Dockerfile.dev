# Multi-stage build for development environment with distroless final stage
# 多階段建置開發環境，最終階段使用 distroless
FROM python:3.11-slim AS builder

# Install build dependencies and system tools
# 安裝建置依賴和系統工具
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
# 設定工作目錄
WORKDIR /app

# Copy dependency files first for better layer caching
# 先複製依賴檔案以優化層快取
COPY pyproject.toml ./

# Upgrade pip to latest version
# 升級 pip 到最新版本
RUN pip install --no-cache-dir --upgrade pip

# Install Python dependencies to a specific target directory
# 安裝 Python 依賴到特定目標目錄
RUN pip install --no-cache-dir --target=/opt/python-deps \
    numpy pandas scipy scikit-learn \
    faker pydantic pyyaml click rich tqdm \
    matplotlib seaborn plotly networkx \
    --timeout 300 --retries 3

# Install development dependencies including full Jupyter environment
# 安裝開發依賴，包含完整 Jupyter 環境
RUN pip install --no-cache-dir --target=/opt/python-deps \
    jupyter \
    jupyterlab \
    notebook \
    ipykernel \
    ipywidgets \
    pytest \
    pytest-cov \
    ruff \
    mypy \
    black \
    isort \
    pre-commit \
    sphinx \
    sphinx-rtd-theme \
    myst-parser \
    --timeout 300 --retries 3

# Copy source code
# 複製原始碼
COPY petsard/ ./petsard/
COPY demo/ ./demo/
COPY templates/ ./templates/
COPY README.md LICENSE CHANGELOG.md ./

# Install PETsARD package in development mode to target directory
# 以開發模式安裝 PETsARD 套件到目標目錄
RUN pip install --no-cache-dir --target=/opt/python-deps -e .

# Copy jupyter and other executables
# 複製 jupyter 和其他執行檔
RUN mkdir -p /opt/bin && \
    cp /usr/local/bin/jupyter* /opt/bin/ 2>/dev/null || true && \
    cp /usr/local/bin/pip* /opt/bin/ 2>/dev/null || true

# Final stage with Google Cloud distroless Python
# 使用 Google Cloud distroless Python 的最終階段
FROM gcr.io/distroless/python3-debian12

# Copy Python dependencies from builder
# 從建置器複製 Python 依賴
COPY --from=builder /opt/python-deps /usr/local/lib/python3.11/site-packages

# Copy the application files
# 複製應用程式檔案
COPY --from=builder /app /app

# Copy executables
# 複製執行檔
COPY --from=builder /opt/bin /usr/local/bin

# Set environment variables for Python optimization and Jupyter
# 設定 Python 優化和 Jupyter 環境變數
ENV PYTHONPATH=/app:/usr/local/lib/python3.11/site-packages \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH=/usr/local/bin:$PATH

# Set working directory
# 設定工作目錄
WORKDIR /app

# Create necessary directories (distroless runs as non-root by default)
# 建立必要目錄（distroless 預設以非 root 執行）
RUN ["python", "-c", "import os; os.makedirs('/app/notebooks', exist_ok=True); os.makedirs('/app/data', exist_ok=True); os.makedirs('/app/output', exist_ok=True)"]

# Expose Jupyter Lab port
# 暴露 Jupyter Lab 埠
EXPOSE 8888

# Set default command to start Jupyter Lab using full path
# 設定預設指令啟動 Jupyter Lab 使用完整路徑
ENTRYPOINT ["/usr/local/bin/jupyter", "lab"]
CMD ["--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=", "--NotebookApp.password="]

# Metadata labels for container registry
# 容器註冊表的元資料標籤
ARG BUILD_DATE
ARG VCS_REF
LABEL maintainer="matheme.justyn@gmail.com" \
      description="PETsARD Development Environment - Distroless with Jupyter" \
      org.opencontainers.image.source="https://github.com/nics-tw/petsard" \
      org.opencontainers.image.documentation="https://nics-tw.github.io/petsard/" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.title="PETsARD Development Environment" \
      org.opencontainers.image.description="Distroless development environment with Jupyter Lab, all dev tools, and PETsARD"