name: Image Building and Publishing

on:
  workflow_run:
    workflows: ["Semantic Release"]
    types:
      - completed
    branches:
      - main
  push:
    branches:
      - main
      - dev
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    strategy:
      matrix:
        variant:
          - name: "standard"
            include_jupyter: "false"
            suffix: ""
          - name: "jupyter"
            include_jupyter: "true"
            suffix: "-jupyter"
    permissions:
      contents: read
      packages: write
      # attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug - Check current version (after semantic release)
        if: github.event_name == 'workflow_run'
        run: |
          echo "Building variant: ${{ matrix.variant.name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Current ref: ${{ github.ref }}"
          echo "Current SHA: ${{ github.sha }}"

          # 檢查 pyproject.toml 中的版本號
          if [ -f "pyproject.toml" ]; then
            echo "=== pyproject.toml version ==="
            grep -E "^version\s*=" pyproject.toml || echo "Version tag was not found in pyproject.toml"
          fi

          # 檢查最新的 Git 標籤
          echo "=== Latest Git tags ==="
          git tag --sort=-version:refname | head -5 || echo "No tags found"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Default tags
            type=ref,event=branch
            type=ref,event=tag
            # Versioning tags
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}

            # type=ref,event=branch,suffix=${{ matrix.variant.suffix }}
            # type=ref,event=pr,suffix=${{ matrix.variant.suffix }}
            # type=semver,pattern={{version}},suffix=${{ matrix.variant.suffix }}
            # type=semver,pattern={{major}}.{{minor}},suffix=${{ matrix.variant.suffix }}
            # type=semver,pattern={{major}},suffix=${{ matrix.variant.suffix }}
            # type=raw,value=latest${{ matrix.variant.suffix }},enable={{is_default_branch}}
          flavor: |
            latest=auto

      - name: Build and push Docker image (${{ matrix.variant.name }})
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.variant.name }}
          cache-to: type=gha,mode=max,scope=${{ matrix.variant.name }}
          build-args: |
            INCLUDE_JUPYTER=${{ matrix.variant.include_jupyter }}

      # - name: Generate artifact attestation
      #   if: github.event_name != 'pull_request'
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      #     subject-digest: ${{ steps.build-and-push.outputs.digest }}
      #     push-to-registry: true
