name: Image Testing

on:
  workflow_run:
    workflows: ["Image Building and Publishing"]
    types:
      - completed
    branches:
      - main
      - dev
  push:
    tags:
      - "v*"
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-image:
    runs-on: ubuntu-latest
    # 只有在成功建置且不是 PR 時才測試
    if: |
      github.event_name != 'pull_request' && (
        github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch' ||
        (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
      )
    strategy:
      matrix:
        variant:
          - name: "standard"
            suffix: ""
          - name: "jupyter"
            suffix: "-jupyter"

    steps:
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧪 Test Docker image (${{ matrix.variant.name }})
        run: |
          # 取得映像標籤
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            TAG=latest
          else
            TAG=${GITHUB_REF#refs/heads/}
          fi

          IMAGE_URL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}${{ matrix.variant.suffix }}"
          echo "Testing image: $IMAGE_URL"

          # 測試映像是否可以正常運行
          docker run --rm $IMAGE_URL python -c "
          import petsard
          import importlib.metadata
          import os
          print('✅ PETsARD 套件載入成功')

          # 檢查變體類型
          include_jupyter = os.getenv('INCLUDE_JUPYTER', 'false').lower() == 'true'
          variant = 'jupyter' if include_jupyter else 'standard'
          print(f'📦 映像變體: {variant}')

          # 使用 importlib.metadata 獲取版本號（配合 semantic release）
          try:
              version = importlib.metadata.version('petsard')
              print(f'📦 版本: {version}')
          except Exception as e:
              print(f'⚠️  版本獲取失敗: {e}')

          # 測試基本功能
          from petsard.executor import Executor
          print('✅ Executor 類別載入成功')

          # 測試模組匯入
          from petsard import loader, constrainer, synthesizer, evaluator
          print('✅ 所有主要模組載入成功')

          # 條件性測試 Jupyter（只有在 jupyter 變體時）
          if include_jupyter:
              try:
                  import jupyterlab
                  print('✅ Jupyter Lab 載入成功')
              except ImportError:
                  print('❌ Jupyter Lab 載入失敗')
                  exit(1)
          else:
              print('✅ Standard 變體 - 已跳過 Jupyter 測試')
              try:
                  import jupyterlab
                  print('❌ 這應該是 Standard 變體，但包含了 Jupyter')
                  exit(1)
              except ImportError:
                  print('✅ 確認沒有 Jupyter 依賴')

          # 測試健康檢查功能
          try:
              health_version = importlib.metadata.version('petsard')
              print(f'🏥 健康檢查通過 - PETsARD v{health_version} ({variant} 變體)')
          except Exception as e:
              print(f'❌ 健康檢查失敗: {e}')
              exit(1)

          print(f'🎉 Docker 映像測試通過！({variant} 變體)')
          "

      - name: 📊 Display image information
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            TAG=latest
          else
            TAG=${GITHUB_REF#refs/heads/}
          fi

          IMAGE_URL="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}${{ matrix.variant.suffix }}"
          echo "## 📦 Docker 映像資訊 (${{ matrix.variant.name }} 變體)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**映像位置:** \`$IMAGE_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**使用方式:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# 拉取映像" >> $GITHUB_STEP_SUMMARY
          echo "docker pull $IMAGE_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ matrix.variant.name }}" == "jupyter" ]]; then
            echo "# 運行 Jupyter Lab" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it -p 8888:8888 -v \$(pwd)/data:/app/data -v \$(pwd)/notebooks:/app/notebooks $IMAGE_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# 運行 Python REPL" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --entrypoint /opt/venv/bin/python3 $IMAGE_URL" >> $GITHUB_STEP_SUMMARY
          else
            echo "# 運行 Python REPL（standard 版本）" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it --entrypoint /opt/venv/bin/python3 $IMAGE_URL" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# 運行範例（掛載資料目錄）" >> $GITHUB_STEP_SUMMARY
            echo "docker run -it -v \$(pwd):/app/data --entrypoint /opt/venv/bin/python3 $IMAGE_URL" >> $GITHUB_STEP_SUMMARY
          fi

          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
