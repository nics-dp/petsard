name: 🧪 Test Suite
# 測試套件：運行所有測試確保代碼品質

on:
  push:
    branches: [main, dev]
    paths:
      - "petsard/**"
      - "tests/**"
      - "pyproject.toml"
      - ".github/workflows/test-suite.yml"
  pull_request:
    branches: [main, dev]
    paths:
      - "petsard/**"
      - "tests/**"
      - "pyproject.toml"
      - ".github/workflows/test-suite.yml"

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true # 不強制要求測試通過才能合併

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Verify Test Environment
        run: |
          echo "### 🔍 環境診斷 Environment Diagnostics" >> test_report.md
          echo "" >> test_report.md
          
          echo "**Python 版本：**" >> test_report.md
          python --version >> test_report.md 2>&1
          echo "" >> test_report.md
          
          echo "**已安裝套件：**" >> test_report.md
          echo "```" >> test_report.md
          pip list | grep -E "(pytest|ruff|petsard)" >> test_report.md 2>&1 || echo "相關套件未找到" >> test_report.md
          echo "```" >> test_report.md
          echo "" >> test_report.md
          
          echo "**測試檔案結構：**" >> test_report.md
          echo "```" >> test_report.md
          if [ -d "tests" ]; then
            ls -la tests/ >> test_report.md 2>&1
          else
            echo "tests/ 目錄不存在" >> test_report.md
          fi
          echo "```" >> test_report.md
          echo "" >> test_report.md
          
          echo "**PETsARD 模組檢查：**" >> test_report.md
          echo "```" >> test_report.md
          python -c "import petsard; print(f'PETsARD version: {petsard.__version__ if hasattr(petsard, \"__version__\") else \"unknown\"}')" >> test_report.md 2>&1 || echo "無法載入 petsard 模組" >> test_report.md
          echo "```" >> test_report.md
          echo "" >> test_report.md
          
          echo "---" >> test_report.md
          echo "" >> test_report.md

      - name: 🔍 Run Ruff Code Quality Check
        id: ruff-check
        run: |
          # 運行 Ruff 檢查（簡潔版本）
          if ruff check . --output-format=concise > ruff_output.txt 2>&1; then
            echo "ruff_status=success" >> $GITHUB_OUTPUT
            echo "### ✅ 程式碼品質檢查通過 Code Quality Check Passed" >> test_report.md
            echo "" >> test_report.md
          else
            echo "ruff_status=failed" >> $GITHUB_OUTPUT
            
            # 統計錯誤數量
            ERROR_COUNT=$(wc -l < ruff_output.txt)
            
            echo "### ⚠️ 程式碼品質問題 Code Quality Issues" >> test_report.md
            echo "**發現 $ERROR_COUNT 個問題需要修正**" >> test_report.md
            echo "" >> test_report.md
            
            # 顯示前10個錯誤
            echo "**主要問題（前10個）:**" >> test_report.md
            echo "```" >> test_report.md
            head -10 ruff_output.txt >> test_report.md
            echo "```" >> test_report.md
            
            if [ "$ERROR_COUNT" -gt 10 ]; then
              echo "*...還有 $((ERROR_COUNT - 10)) 個問題*" >> test_report.md
            fi
            echo "" >> test_report.md
          fi

      - name: 🧪 Run Unit Tests with Coverage
        id: unit-tests
        run: |
          echo "## 🧪 測試結果 Test Results" >> test_report.md
          echo "" >> test_report.md

          # 運行測試並捕獲結果，使用簡潔格式
          if pytest tests/ --cov=petsard --cov-report=term-missing --cov-report=xml --tb=short --junit-xml=pytest-results.xml > test_output.txt 2>&1; then
            echo "test_status=success" >> $GITHUB_OUTPUT
            
            # 提取測試統計
            PASSED_COUNT=$(grep -c "PASSED" test_output.txt 2>/dev/null || echo "0")
            TOTAL_COUNT=$(grep -E "^[0-9]+ passed" test_output.txt | grep -o "^[0-9]+" || echo "$PASSED_COUNT")
            
            echo "### ✅ 所有測試通過！All Tests Passed!" >> test_report.md
            echo "" >> test_report.md
            echo "**📊 總計**: $TOTAL_COUNT 個測試全部通過" >> test_report.md
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
            
            # 檢查是否有測試執行錯誤
            if grep -q "ERROR" test_output.txt; then
              echo "### ❌ 測試執行錯誤 Test Execution Error" >> test_report.md
              echo "" >> test_report.md
              echo "**測試無法正常執行，可能的原因：**" >> test_report.md
              echo "- 找不到測試檔案或模組" >> test_report.md
              echo "- 測試配置錯誤" >> test_report.md
              echo "- 相依套件未正確安裝" >> test_report.md
              echo "" >> test_report.md
              echo "**錯誤詳情：**" >> test_report.md
              echo "```" >> test_report.md
              # 顯示錯誤訊息（前50行）
              head -50 test_output.txt >> test_report.md
              echo "```" >> test_report.md
            else
              # 提取測試統計（從 pytest 摘要行）
              SUMMARY_LINE=$(grep -E "=+ (short test summary info|[0-9]+ failed|[0-9]+ passed|[0-9]+ error)" test_output.txt | tail -1)
              
              # 嘗試從不同格式提取統計
              if echo "$SUMMARY_LINE" | grep -q "short test summary"; then
                # 如果有 short test summary，從之後的行提取
                PASSED_COUNT=$(grep -E "^[0-9]+ passed" test_output.txt | tail -1 | grep -o "^[0-9]*" || echo "0")
                FAILED_COUNT=$(grep -E "^[0-9]+ failed" test_output.txt | tail -1 | grep -o "^[0-9]*" || echo "0")
                ERROR_COUNT=$(grep -E "^[0-9]+ error" test_output.txt | tail -1 | grep -o "^[0-9]*" || echo "0")
                SKIPPED_COUNT=$(grep -E "^[0-9]+ skipped" test_output.txt | tail -1 | grep -o "^[0-9]*" || echo "0")
              else
                # 標準格式提取
                PASSED_COUNT=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* passed" | grep -o "[0-9]*" || echo "0")
                FAILED_COUNT=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* failed" | grep -o "[0-9]*" || echo "0")
                ERROR_COUNT=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* error" | grep -o "[0-9]*" || echo "0")
                SKIPPED_COUNT=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* skipped" | grep -o "[0-9]*" || echo "0")
              fi
              
              TOTAL_FAILED=$((FAILED_COUNT + ERROR_COUNT))
              TOTAL_COUNT=$((PASSED_COUNT + FAILED_COUNT + ERROR_COUNT + SKIPPED_COUNT))
              
              # 如果統計全是 0，可能是解析失敗
              if [ "$TOTAL_COUNT" -eq 0 ]; then
                echo "### ⚠️ 測試結果無法解析 Test Results Cannot Be Parsed" >> test_report.md
                echo "" >> test_report.md
                echo "**無法從測試輸出中提取統計資訊**" >> test_report.md
                echo "" >> test_report.md
                echo "**原始輸出（前50行）：**" >> test_report.md
                echo "```" >> test_report.md
                head -50 test_output.txt >> test_report.md
                echo "```" >> test_report.md
              else
                echo "### ⚠️ 測試未完全通過 Tests Not Fully Passed" >> test_report.md
                echo "" >> test_report.md
                echo "**📊 測試結果**: $PASSED_COUNT/$TOTAL_COUNT 通過" >> test_report.md
                
                if [ "$TOTAL_FAILED" -gt 0 ]; then
                  echo "" >> test_report.md
                  echo "**❌ 失敗的測試 ($TOTAL_FAILED 個):**" >> test_report.md
                  echo "" >> test_report.md
                  
                  # 提取失敗測試名稱（從 FAILED 行）
                  if grep "FAILED" test_output.txt | grep -o "tests/[^:]*::[^[:space:]]*" | sed 's/tests\///' | sed 's/::/ → /' > failed_tests.txt 2>/dev/null && [ -s failed_tests.txt ]; then
                    cat failed_tests.txt | while IFS= read -r test_name; do
                      echo "• \`$test_name\`" >> test_report.md
                    done
                  fi
                  
                  # 顯示錯誤詳情（從 short test summary）
                  if grep -q "FAILED\|ERROR" test_output.txt; then
                    echo "" >> test_report.md
                    echo "**錯誤詳情：**" >> test_report.md
                    echo "```" >> test_report.md
                    grep -A 5 "short test summary" test_output.txt | head -20 >> test_report.md
                    echo "```" >> test_report.md
                  fi
                fi
                
                if [ "$SKIPPED_COUNT" -gt 0 ]; then
                  echo "" >> test_report.md
                  echo "**⏭️ 跳過**: $SKIPPED_COUNT 個測試" >> test_report.md
                fi
              fi
            fi
          fi
          
          echo "" >> test_report.md

      - name: 📊 Generate Coverage Report
        if: always()
        run: |
          # 生成簡潔的覆蓋率報告
          if [ -f coverage.xml ]; then
            COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f", $1*100}')
            if [ ! -z "$COVERAGE_PERCENT" ]; then
              echo "**覆蓋率**: $COVERAGE_PERCENT%" >> test_report.md
              echo "" >> test_report.md
            fi
          fi

      - name: 🧪 Run Functional Tests
        id: functional-tests
        run: |
          # 檢查測試檔案是否存在
          if [ ! -f "tests/test_petsard.py" ]; then
            echo "functional_status=skipped" >> $GITHUB_OUTPUT
            echo "### ⏭️ 功能測試跳過 Functional Tests Skipped" >> test_report.md
            echo "**原因**: 找不到 tests/test_petsard.py 檔案" >> test_report.md
            echo "" >> test_report.md
          else
            if pytest tests/test_petsard.py --tb=short > functional_output.txt 2>&1; then
              echo "functional_status=success" >> $GITHUB_OUTPUT
              
              # 提取測試數量
              FUNC_TOTAL=$(grep -E "^[0-9]+ passed" functional_output.txt | grep -o "^[0-9]+" || echo "0")
              
              echo "### ✅ 功能測試通過 Functional Tests Passed" >> test_report.md
              echo "**📊 總計**: $FUNC_TOTAL 個功能測試全部通過" >> test_report.md
              echo "" >> test_report.md
            else
              echo "functional_status=failed" >> $GITHUB_OUTPUT
              
              # 檢查是否有執行錯誤
              if grep -q "ERROR" functional_output.txt; then
                echo "### ❌ 功能測試執行錯誤 Functional Test Execution Error" >> test_report.md
                echo "" >> test_report.md
                echo "**錯誤詳情：**" >> test_report.md
                echo "```" >> test_report.md
                head -50 functional_output.txt >> test_report.md
                echo "```" >> test_report.md
              else
                # 提取測試統計
                SUMMARY_LINE=$(grep -E "^[0-9]+ (failed|passed|error)" functional_output.txt | tail -1)
                FUNC_PASSED=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* passed" | grep -o "[0-9]*" || echo "0")
                FUNC_FAILED=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* failed" | grep -o "[0-9]*" || echo "0")
                FUNC_ERROR=$(echo "$SUMMARY_LINE" | grep -o "[0-9]* error" | grep -o "[0-9]*" || echo "0")
                FUNC_TOTAL=$((FUNC_PASSED + FUNC_FAILED + FUNC_ERROR))
                
                if [ "$FUNC_TOTAL" -eq 0 ]; then
                  echo "### ⚠️ 功能測試結果無法解析 Functional Test Results Cannot Be Parsed" >> test_report.md
                  echo "" >> test_report.md
                  echo "**原始輸出（前50行）：**" >> test_report.md
                  echo "```" >> test_report.md
                  head -50 functional_output.txt >> test_report.md
                  echo "```" >> test_report.md
                else
                  echo "### ⚠️ 功能測試未完全通過 Functional Tests Not Fully Passed" >> test_report.md
                  echo "**📊 功能測試**: $FUNC_PASSED/$FUNC_TOTAL 通過" >> test_report.md
                  
                  TOTAL_FUNC_FAILED=$((FUNC_FAILED + FUNC_ERROR))
                  if [ "$TOTAL_FUNC_FAILED" -gt 0 ]; then
                    echo "" >> test_report.md
                    echo "**❌ 失敗的功能測試 ($TOTAL_FUNC_FAILED 個):**" >> test_report.md
                    
                    # 提取失敗測試名稱
                    if grep "FAILED" functional_output.txt | grep -o "test_petsard.py::[^[:space:]]*" | sed 's/test_petsard.py:://' > failed_functional.txt 2>/dev/null && [ -s failed_functional.txt ]; then
                      cat failed_functional.txt | while IFS= read -r test_name; do
                        echo "• \`$test_name\`" >> test_report.md
                      done
                    fi
                    
                    # 顯示錯誤詳情
                    if grep -q "FAILED\|ERROR" functional_output.txt; then
                      echo "" >> test_report.md
                      echo "**錯誤詳情：**" >> test_report.md
                      echo "```" >> test_report.md
                      grep -A 5 "short test summary" functional_output.txt | head -20 >> test_report.md
                      echo "```" >> test_report.md
                    fi
                  fi
                fi
              fi
            fi
          fi
          
          echo "" >> test_report.md

      - name: 📊 Generate Test Summary
        run: |
          echo "---" >> test_report.md
          echo "" >> test_report.md
          echo "### 📊 總結 Summary" >> test_report.md
          echo "" >> test_report.md

          # 檢查所有步驟的狀態
          RUFF_STATUS="${{ steps.ruff-check.outputs.ruff_status }}"
          UNIT_STATUS="${{ steps.unit-tests.outputs.test_status }}"
          FUNC_STATUS="${{ steps.functional-tests.outputs.functional_status }}"

          if [[ "$RUFF_STATUS" == "success" && "$UNIT_STATUS" == "success" && "$FUNC_STATUS" == "success" ]]; then
            echo "## 🎉 所有檢查通過！All Checks Passed!" >> test_report.md
            echo "test_overall=success" >> $GITHUB_ENV
          else
            echo "## ⚠️ 檢查結果 Check Results" >> test_report.md
            echo "" >> test_report.md
            echo "| 檢查項目 | 狀態 |" >> test_report.md
            echo "|---------|------|" >> test_report.md
            echo "| 程式碼品質 Code Quality | $([ "$RUFF_STATUS" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> test_report.md
            echo "| 單元測試 Unit Tests | $([ "$UNIT_STATUS" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> test_report.md
            echo "| 功能測試 Functional Tests | $([ "$FUNC_STATUS" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> test_report.md
            echo "test_overall=failed" >> $GITHUB_ENV
          fi

          echo "" >> test_report.md
          
          # 添加詳細輸出連結
          echo "<details>" >> test_report.md
          echo "<summary>📝 查看詳細測試輸出 View Detailed Output</summary>" >> test_report.md
          echo "" >> test_report.md
          echo "### 單元測試輸出 Unit Test Output" >> test_report.md
          echo "```" >> test_report.md
          cat test_output.txt | head -500 >> test_report.md
          echo "```" >> test_report.md
          echo "" >> test_report.md
          echo "### 功能測試輸出 Functional Test Output" >> test_report.md
          echo "```" >> test_report.md
          cat functional_output.txt | head -500 >> test_report.md
          echo "```" >> test_report.md
          echo "</details>" >> test_report.md
          
          echo "" >> test_report.md
          echo "---" >> test_report.md
          echo "*Python ${{ matrix.python-version }} | $(date -u +"%Y-%m-%d %H:%M UTC")*" >> test_report.md

      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test_report.md', 'utf8');

            // 檢查是否已有測試結果留言
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('🧪 測試結果 Test Results') || comment.body.includes('🧪 測試套件報告 Test Suite Report'))
            );

            const commentBody = `## 🧪 測試套件報告 Test Suite Report\n\n${report}`;

            if (botComment) {
              // 更新現有留言
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // 創建新留言
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: 📤 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            test_output.txt
            functional_output.txt
            test_report.md
            coverage.xml
            failures.txt
            summary.txt
            coverage_detail.txt
            coverage_table.txt
            ruff_output.txt
            ruff_report.md
            failed_tests.txt
            failed_functional.txt
            pytest-results.xml
          retention-days: 7

      - name: ℹ️ Test Status Summary
        if: always()
        run: |
          if [[ "$test_overall" == "success" ]]; then
            echo "::notice::🎉 所有檢查通過！All checks passed for Python ${{ matrix.python-version }} (Code Quality + Tests)"
          else
            echo "::warning::⚠️ 部分檢查失敗，但不會阻止合併。Some checks failed for Python ${{ matrix.python-version }} (Code Quality + Tests), but merge is not blocked."
          fi
