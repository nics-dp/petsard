name: 🧪 Test Suite
# 測試套件：運行所有測試確保代碼品質

on:
  push:
    branches: [main, dev]
    paths:
      - 'petsard/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test-suite.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'petsard/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test-suite.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # 不強制要求測試通過才能合併
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            
      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: 🧪 Run Unit Tests with Coverage
        id: unit-tests
        run: |
          echo "## 🧪 測試結果 Test Results" >> test_report.md
          echo "" >> test_report.md
          echo "**Python 版本**: ${{ matrix.python-version }}" >> test_report.md
          echo "**執行時間**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test_report.md
          echo "" >> test_report.md
          
          # 運行測試並捕獲結果，包含覆蓋率
          if pytest tests/ --cov=petsard --cov-report=term-missing --cov-report=xml --tb=long -v --disable-warnings > test_output.txt 2>&1; then
            echo "test_status=success" >> $GITHUB_OUTPUT
            echo "### ✅ 測試通過 Tests Passed" >> test_report.md
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
            echo "### ❌ 測試失敗 Tests Failed" >> test_report.md
            
            # 提取失敗的測試詳細信息
            echo "" >> test_report.md
            echo "#### 🔍 失敗測試詳細信息 Failed Test Details" >> test_report.md
            echo "" >> test_report.md
            
            # 提取 FAILURES 部分
            if grep -A 50 "FAILURES" test_output.txt > failures.txt 2>/dev/null; then
              echo "**失敗的測試案例 Failed Test Cases:**" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              head -100 failures.txt >> test_report.md
              echo "```" >> test_report.md
              echo "" >> test_report.md
            fi
            
            # 提取 short test summary
            if grep -A 20 "short test summary" test_output.txt > summary.txt 2>/dev/null; then
              echo "**測試摘要 Test Summary:**" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              cat summary.txt >> test_report.md
              echo "```" >> test_report.md
              echo "" >> test_report.md
            fi
          fi
          
      - name: 📊 Generate Coverage Report
        if: always()
        run: |
          echo "" >> test_report.md
          echo "### 📊 測試覆蓋率 Test Coverage" >> test_report.md
          echo "" >> test_report.md
          
          # 生成覆蓋率報告
          if [ -f coverage.xml ]; then
            # 簡化的覆蓋率提取
            COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}')
            if [ -z "$COVERAGE_PERCENT" ]; then
              COVERAGE_PERCENT="N/A"
            fi
            echo "**整體覆蓋率 Overall Coverage**: $COVERAGE_PERCENT" >> test_report.md
            echo "" >> test_report.md
            
            # 生成詳細覆蓋率報告
            pytest --cov=petsard --cov-report=term-missing --tb=no -q > coverage_detail.txt 2>&1 || true
            if grep -A 50 "Name.*Stmts.*Miss.*Cover.*Missing" coverage_detail.txt > coverage_table.txt 2>/dev/null; then
              echo "**詳細覆蓋率報告 Detailed Coverage Report:**" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              cat coverage_table.txt >> test_report.md
              echo "```" >> test_report.md
              echo "" >> test_report.md
              
              # 覆蓋率解讀說明
              echo "**📖 覆蓋率解讀說明 Coverage Explanation:**" >> test_report.md
              echo "- **Stmts**: 程式碼行數 (Total lines of code)" >> test_report.md
              echo "- **Miss**: 未測試行數 (Lines not covered by tests)" >> test_report.md
              echo "- **Cover**: 覆蓋率百分比 (Coverage percentage)" >> test_report.md
              echo "- **Missing**: 未覆蓋的具體行號 (Specific line numbers not covered)" >> test_report.md
              echo "" >> test_report.md
              
              # 覆蓋率品質評估
              COVERAGE_NUM=$(echo $COVERAGE_PERCENT | sed 's/%//')
              if [ ! -z "$COVERAGE_NUM" ] && [ "$COVERAGE_NUM" != "N/A" ]; then
                if (( $(echo "$COVERAGE_NUM >= 90" | bc -l 2>/dev/null || echo 0) )); then
                  echo "🎉 **覆蓋率評級**: 優秀 (Excellent) - 90%+ 覆蓋率" >> test_report.md
                elif (( $(echo "$COVERAGE_NUM >= 80" | bc -l 2>/dev/null || echo 0) )); then
                  echo "✅ **覆蓋率評級**: 良好 (Good) - 80-89% 覆蓋率" >> test_report.md
                elif (( $(echo "$COVERAGE_NUM >= 70" | bc -l 2>/dev/null || echo 0) )); then
                  echo "⚠️ **覆蓋率評級**: 尚可 (Fair) - 70-79% 覆蓋率，建議提升" >> test_report.md
                else
                  echo "❌ **覆蓋率評級**: 需改進 (Needs Improvement) - <70% 覆蓋率，強烈建議增加測試" >> test_report.md
                fi
              fi
            fi
          fi
          
          echo "" >> test_report.md
          echo "### 📝 完整測試輸出 Full Test Output" >> test_report.md
          echo "" >> test_report.md
          echo "<details>" >> test_report.md
          echo "<summary>點擊查看完整測試輸出 Click to view full test output</summary>" >> test_report.md
          echo "" >> test_report.md
          echo "```" >> test_report.md
          cat test_output.txt >> test_report.md
          echo "```" >> test_report.md
          echo "</details>" >> test_report.md
          
      - name: 🧪 Run Functional Tests
        id: functional-tests
        run: |
          echo "" >> test_report.md
          echo "### 🔄 功能測試 Functional Tests" >> test_report.md
          echo "" >> test_report.md
          
          if pytest tests/test_petsard.py -v --disable-warnings > functional_output.txt 2>&1; then
            echo "functional_status=success" >> $GITHUB_OUTPUT
            echo "✅ **功能測試通過** Functional tests passed" >> test_report.md
          else
            echo "functional_status=failed" >> $GITHUB_OUTPUT
            echo "❌ **功能測試失敗** Functional tests failed" >> test_report.md
          fi
          
          echo "" >> test_report.md
          echo "```" >> test_report.md
          cat functional_output.txt >> test_report.md
          echo "```" >> test_report.md
          
      - name: 📊 Generate Test Summary
        run: |
          echo "" >> test_report.md
          echo "### 📊 測試摘要 Test Summary" >> test_report.md
          echo "" >> test_report.md
          
          if [[ "${{ steps.unit-tests.outputs.test_status }}" == "success" && "${{ steps.functional-tests.outputs.functional_status }}" == "success" ]]; then
            echo "🎉 **所有測試通過！** All tests passed!" >> test_report.md
            echo "test_overall=success" >> $GITHUB_ENV
          else
            echo "⚠️ **部分測試失敗** Some tests failed" >> test_report.md
            echo "test_overall=failed" >> $GITHUB_ENV
          fi
          
          echo "" >> test_report.md
          echo "---" >> test_report.md
          echo "*此報告由測試套件自動生成 | Auto-generated by Test Suite*" >> test_report.md
          
      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test_report.md', 'utf8');
            
            // 檢查是否已有測試結果留言
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🧪 測試結果 Test Results')
            );
            
            const commentBody = `## 🧪 測試套件報告 Test Suite Report\n\n${report}`;
            
            if (botComment) {
              // 更新現有留言
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // 創建新留言
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
            
      - name: 📤 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            test_output.txt
            functional_output.txt
            test_report.md
            coverage.xml
            failures.txt
            summary.txt
            coverage_detail.txt
            coverage_table.txt
          retention-days: 7
          
      - name: ℹ️ Test Status Summary
        if: always()
        run: |
          if [[ "$test_overall" == "success" ]]; then
            echo "::notice::🎉 所有測試通過！All tests passed for Python ${{ matrix.python-version }}"
          else
            echo "::warning::⚠️ 部分測試失敗，但不會阻止合併。Some tests failed for Python ${{ matrix.python-version }}, but merge is not blocked."
          fi