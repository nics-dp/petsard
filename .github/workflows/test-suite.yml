name: 🧪 Test Suite

on:
  push:
    branches: [main, dev]
    paths:
      - "petsard/**"
      - "tests/**"
      - "pyproject.toml"
      - ".github/workflows/test-suite.yml"
  pull_request:
    branches: [main, dev]
    paths:
      - "petsard/**"
      - "tests/**"
      - "pyproject.toml"
      - ".github/workflows/test-suite.yml"

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: 🧪 Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v5

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: 🔧 Install
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Ruff Check
        id: ruff
        continue-on-error: true
        run: |
          ruff check . --output-format=json > ruff.json 2>&1 || true
          echo "status=$([ -s ruff.json ] && echo 'failed' || echo 'success')" >> $GITHUB_OUTPUT

      - name: 🧪 Run Tests
        id: pytest
        continue-on-error: true
        run: |
          pytest tests/ \
            --cov=petsard \
            --cov-report=term \
            --cov-report=xml \
            --cov-report=json \
            --tb=short \
            --junit-xml=junit.xml \
            -v 2>&1 | tee pytest.log || true
          
          # 儲存退出碼
          echo "status=$?" >> $GITHUB_OUTPUT

      - name: 📊 Generate Report
        if: always()
        run: |
          python << 'PYTHON_SCRIPT'
          import json
          import xml.etree.ElementTree as ET
          from pathlib import Path
          
          report = []
          report.append("## 🧪 測試報告 Test Report\n")
          
          # === Ruff 結果 ===
          ruff_file = Path("ruff.json")
          if ruff_file.exists() and ruff_file.stat().st_size > 0:
              try:
                  with open("ruff.json") as f:
                      ruff_data = json.load(f)
                  
                  if ruff_data:
                      report.append(f"### ⚠️ 程式碼品質 ({len(ruff_data)} 個問題)\n")
                      
                      # 按檔案分組
                      by_file = {}
                      for issue in ruff_data[:20]:  # 最多顯示 20 個
                          filename = issue.get('filename', 'unknown')
                          if filename not in by_file:
                              by_file[filename] = []
                          by_file[filename].append(issue)
                      
                      for filename, issues in by_file.items():
                          report.append(f"\n**{filename}**\n")
                          for issue in issues[:5]:  # 每檔案最多 5 個
                              line = issue.get('location', {}).get('row', '?')
                              code = issue.get('code', '?')
                              msg = issue.get('message', 'No message')
                              report.append(f"- Line {line}: `{code}` {msg}\n")
                      
                      if len(ruff_data) > 20:
                          report.append(f"\n*...還有 {len(ruff_data) - 20} 個問題*\n")
                  else:
                      report.append("### ✅ 程式碼品質通過\n")
              except Exception as e:
                  report.append(f"### ⚠️ 無法解析 Ruff 結果: {e}\n")
          else:
              report.append("### ✅ 程式碼品質通過\n")
          
          report.append("\n---\n\n")
          
          # === Pytest 結果 ===
          junit_file = Path("junit.xml")
          coverage_file = Path("coverage.json")
          
          if junit_file.exists():
              try:
                  tree = ET.parse("junit.xml")
                  root = tree.getroot()
                  
                  total = int(root.get('tests', 0))
                  failures = int(root.get('failures', 0))
                  errors = int(root.get('errors', 0))
                  skipped = int(root.get('skipped', 0))
                  passed = total - failures - errors - skipped
                  
                  # 標題
                  if failures + errors == 0:
                      report.append(f"### ✅ 測試通過 ({passed}/{total})\n\n")
                  else:
                      report.append(f"### ❌ 測試失敗 ({passed}/{total} 通過)\n\n")
                  
                  # 覆蓋率
                  if coverage_file.exists():
                      with open("coverage.json") as f:
                          cov_data = json.load(f)
                      coverage = cov_data.get('totals', {}).get('percent_covered', 0)
                      report.append(f"**覆蓋率**: {coverage:.1f}%\n\n")
                  
                  # 失敗的測試
                  if failures + errors > 0:
                      report.append(f"**失敗的測試**:\n\n")
                      for testcase in root.iter('testcase'):
                          failure = testcase.find('failure')
                          error = testcase.find('error')
                          if failure is not None or error is not None:
                              classname = testcase.get('classname', '')
                              name = testcase.get('name', '')
                              report.append(f"- `{classname}::{name}`\n")
                              
                              # 錯誤訊息
                              msg = (failure or error).get('message', '')
                              if msg:
                                  # 只取第一行
                                  first_line = msg.split('\n')[0][:100]
                                  report.append(f"  *{first_line}*\n")
                      report.append("\n")
                  
                  # 跳過的測試
                  if skipped > 0:
                      report.append(f"**跳過**: {skipped} 個測試\n\n")
                      
              except Exception as e:
                  report.append(f"### ⚠️ 無法解析測試結果: {e}\n\n")
          else:
              report.append("### ❌ 找不到測試結果\n\n")
          
          # === 詳細輸出 ===
          pytest_log = Path("pytest.log")
          if pytest_log.exists():
              report.append("\n<details>\n<summary>📝 詳細測試輸出</summary>\n\n```\n")
              with open("pytest.log") as f:
                  lines = f.readlines()
                  # 只顯示最後 200 行
                  report.extend(lines[-200:])
              report.append("\n```\n</details>\n")
          
          # 寫入報告
          with open("test_report.md", "w") as f:
              f.writelines(report)
          
          print("".join(report))
          PYTHON_SCRIPT

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test_report.md', 'utf8');
            
            // 尋找現有留言
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes('🧪 測試報告')
            );
            
            const body = `## 🧪 測試報告 (Python ${{ matrix.python-version }})\n\n${report}\n\n---\n*Updated at ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }

      - name: 📤 Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-py${{ matrix.python-version }}
          path: |
            pytest.log
            junit.xml
            coverage.xml
            coverage.json
            ruff.json
            test_report.md
          retention-days: 7

      - name: ℹ️ Summary
        if: always()
        run: |
          RUFF_STATUS="${{ steps.ruff.outputs.status }}"
          TEST_STATUS="${{ steps.pytest.outputs.status }}"
          
          if [[ "$RUFF_STATUS" == "success" && "$TEST_STATUS" == "0" ]]; then
            echo "::notice::✅ Python ${{ matrix.python-version }}: 所有檢查通過"
          else
            echo "::warning::⚠️ Python ${{ matrix.python-version }}: 部分檢查失敗（不阻止合併）"
          fi
