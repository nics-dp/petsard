# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-22.04 # ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ipykernel
        pip install pyyaml
        pip install boto3
        pip install sdv
        pip install smartnoise-synth # Error can be ignored
        pip install anonymeter
        pip install git+https://github.com/ryan112358/private-pgm.git
        pip install --upgrade torch # Error can be ignored
        pip install requests

        # pip install flake8 pytest
        # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Handmade Test for Synthesizer
      run: |
        python -c "
        import pprint
        
        from PETsARD import Loader, Processor, Synthesizer
        
        pp = pprint.PrettyPrinter(depth=2)
        
        load = Loader(filepath='benchmark://adult-income')
        load.load()
        load.data = load.data.loc[:1000, :]
        print(load.data.head(1))

        syn_list = ['smartnoise-aim', 'smartnoise-mst', 'smartnoise-dpctgan', 'smartnoise-patectgan']
        for synthesizing_method in syn_list:
          proc_discretizing = Processor(metadata=load.metadata,)

          if synthesizing_method in ['smartnoise-dpctgan', 'smartnoise-patectgan']:
            print("Preproc config of Outlier before update as ...")
            pp.pprint(proc_discretizing.get_config()['scaler'])
            proc_discretizing.update_config(
                {'outlier': {
                    col: None for col in load.data.columns
                }}
            )
            print("Preproc config of Outlier before after as ...")
            pp.pprint(proc_discretizing.get_config()['scaler'])

          proc_discretizing.fit(
              data=load.data,
              sequence=[
                  'missing',
                  'outlier',
                  'scaler',
                  'discretizing'
              ]
          )
          preproc_discretizing_data = proc_discretizing.transform(data=load.data)
          print("Preproc data as ...")
          print(preproc_discretizing_data.head(1))

          syn = Synthesizer(
              method=synthesizing_method,
              epsilon=10.0,
          )
          syn.create(data=preproc_discretizing_data)
          syn.fit_sample()
          print("Sync data as ...")
          print(syn.data_syn.head(1))
          postproc_discretizing_data = proc_discretizing.inverse_transform(
              data=syn.data_syn
          )
          print(postproc_discretizing_data.head(1))
        "
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    # - name: Test with pytest
    #   run: |
    #     pytest
