[project]
name = "petsard"
version = "1.6.0-rc.2"
description = "Facilitates data generation algorithm and their evaluation processes"
authors = [{ name = "matheme-justyn", email = "matheme.justyn@gmail.com" }]
keywords = [
	"petsard",
	"data preprocessing",
	"data generation",
	"data evaluation",
	"synthetic data",
	"privacy",
	"privacy enhancing technologies",
	"PETS",
	"anonymization",
	"differential privacy",
	"data science",
	"machine learning",
]
# PyPI 專案頁面顯示的 README 文件
# README file displayed on PyPI project page
readme = "README.md"
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Natural Language :: English",
	"Natural Language :: Chinese (Traditional)",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Intended Audience :: Developers",
	"Intended Audience :: Financial and Insurance Industry",
	"Intended Audience :: Legal Industry",
]

# Python 3.12 not supported due to anonymeter dependency conflicts
requires-python = ">=3.10,<3.12"

[project.urls]
Repository = "https://github.com/nics-tw/petsard"
Documentation = "https://nics-tw.github.io/petsard/"
"Bug Tracker" = "https://github.com/nics-tw/petsard/issues"

[dependency-groups]
# PETsARD 標準功能 / PETsARD standard functionality
# 這是預設安裝的群組 / This is the default installation group
default = [
    {include-group = "eval"},
    {include-group = "exec"},
    {include-group = "syn"},
]

# 資料科學功能 / Data science functionality
# 使用者可以執行: pip install petsard[ds]
ds = [
	{include-group = "default"},
	{include-group = "jupyter"},
]

# 完整功能群組 / Full functionality group
# 使用者可以執行: pip install petsard[all]
all = [
	{include-group = "ds"},
	{include-group = "load-xlsx"},
	{include-group = "load-benchmark"},
]

# 開發功能 / Development functionality
# 使用者可以執行: pip install petsard[dev]
dev = [
	{include-group = "all"},
	{include-group = "dev-tools"},
]

# 執行功能群組 / Execution functionality group
exec = [
	"pandas>=2.3.1,<3",   # Data manipulation and analysis
	"pyyaml>=6.0.2,<7",   # YAML configuration support
    ###### Core lib above, SBOM related below ######
	# pandas dependencies
	"numpy>=1.26.4,<2",
	"python-dateutil>=2.9.0.post0,<3",
	"pytz>=2025.2",
	"tzdata>=2025.2",
]

# 評估功能群組 / Evaluation functionality group
eval = [
	"anonymeter>=1.0.0,<2",   # Privacy risk evaluation
	"sdmetrics>=0.22.0,<1",   # Synthetic data quality metrics
	###### Core lib above, SBOM related below ######
	# anonymeter, sdmetrics dependencies
	"numpy>=1.26.4,<2",
	"scikit-learn>=1.7.0,<2",
	# anonymeter dependencies
	"joblib>=1.5.1,<2",
	"numba>=0.61.2,<1",
	# sdmetrics dependencies
	"plotly>=6.2.0,<7",
	"scipy>=1.15.3,<2 ; python_full_version < '3.11'",
	"scipy>=1.16.0,<2 ; python_full_version >= '3.11'",
]

# 合成資料生成群組 / Synthetic data generation group
syn = [
	"sdv>=1.25.0,<2",    # Synthetic data generation
	"torch>=2.8.0,<3",   # PyTorch for deep learning models
	###### Core lib above, SBOM related below ######
	# sdv, torch dependencies
	"numpy>=1.26.4,<2",
	"pytz>=2025.2",
	"scipy>=1.15.3,<2 ; python_full_version < '3.11'",
	"scipy>=1.16.0,<2 ; python_full_version >= '3.11'",
	"tzdata>=2025.2",
	# sdv dependencies
	"boto3>=1.40.3,<2",
	"botocore>=1.39.3,<2",
	"faker>=37.5.3,<38",
	"filelock>=3.18.0,<4",
	"joblib>=1.5.1,<2",
	"narwhals>=1.45.0,<2",
	"numba>=0.61.2,<1",
	"platformdirs>=4.3.8,<5",
	"plotly>=6.2.0,<7",
	"s3transfer>=0.13.1,<1",
	"threadpoolctl>=3.6.0,<4",
	"typing-extensions>=4.14.1,<5",
	"urllib3>=2.5.0,<3",
	# torch dependencies
	"fsspec>=2025.7.0",
	"jinja2>=3.1.6,<4",
	"networkx>=3.4.2,<3.5 ; python_full_version < '3.11'",
	"networkx>=3.5,<4 ; python_full_version >= '3.11'",
	"nvidia-cublas-cu12>=12.6.4.1,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cuda-cupti-cu12>=12.6.80,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cuda-nvrtc-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cuda-runtime-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cudnn-cu12>=9.5.1.17,<10 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cufft-cu12>=11.3.0.4,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cufile-cu12>=1.11.1.6,<2 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-curand-cu12>=10.3.7.77,<11 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cusolver-cu12>=11.7.1.2,<12 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cusparse-cu12>=12.5.4.2,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-cusparselt-cu12>=0.6.3,<1 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-nccl-cu12>=2.26.2,<3 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-nvjitlink-cu12>=12.6.85,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"nvidia-nvtx-cu12>=12.6.77,<13 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
	"sympy>=1.14.0,<2",
	"triton>=3.4.0,<4 ; platform_machine == 'x86_64' and sys_platform == 'linux'",
]

# Jupyter 群組 / Jupyter group
jupyter = [
	"ipykernel>=6.29.5,<7",                                 # Jupyter kernel support
	"ipython>=8.3.0,<9 ; python_full_version < '3.11'",     # IPython for Python 3.10
	"ipython>=9.4.0,<10 ; python_full_version >= '3.11'",   # IPython for Python 3.11+
	"jupyterlab>=4.0.0,<5",                                 # JupyterLab support
	"notebook>=7.4.5,<8",                                   # Jupyter Notebook support
	"pyzmq>=27.0.0,<28",                                    # Jupyter messaging
	###### Core lib above, SBOM related below ######
	# ipykernel dependencies
	"debugpy>=1.8.14,<2",
	# ipython dependencies
	"decorator>=5.2.1,<6",
	"ipython-pygments-lexers>=1.1.1,<2 ; python_version >= '3.11'",
	"prompt-toolkit>=3.0.51,<4",
	# jupyterlab dependencies
	"psutil>=7.0.0,<8",
]

# Excel 檔案支援群組 / Excel file support group
load-xlsx = [
    "openpyxl>=3.1.5,<4",   # Excel file reading/writing
]

# Benchmark 基準資料集支援群組 / Benchmark dataset support group
load-benchmark = [
    "requests>=2.32.4,<3",   # HTTP requests for downloading datasets
]

# 開發工具依賴群組 / Development tools dependency group
dev-tools = [
    "pip-audit>=2.7.3",                  # Security audit tool
	"pytest>=8.4.1",                     # Testing framework
	"pytest-cov>=6.0.0",                 # Test coverage reporting
	"python-semantic-release>=10.3.1",   # Release automation
	"ruff>=0.12.7",                      # Linting and formatting
	"trove-classifiers>=2025.5.9.12",    # PyPI classifiers
]

[build-system]
requires = [
	"hatchling",
] # 指定 Hatchling 作為建置工具 Specifies Hatchling as the build tool
build-backend = "hatchling.build" # 使用 Hatchling 的後端建置套件 Uses Hatchling's build backend

[tool.ruff]
# 基本設定
line-length = 88
target-version = "py311"

# 選擇要檢查的規則
lint.select = [
	"E",  # pycodestyle errors
	"W",  # pycodestyle warnings
	"F",  # pyflakes
	"I",  # isort
	"B",  # flake8-bugbear
	"C4", # flake8-comprehensions
	"UP", # pyupgrade
]

# 忽略的規則
lint.ignore = [
	"E501", # 行長度限制（已在 line-length 設定）
	"UP038", # 已預訂於未來版本移除
]

[tool.ruff.format]
# 格式化設定
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.semantic_release]
tag_format = "v{version}"         # 版本標籤格式 Version tag format
major_on_zero = false             # 不允許 0.x.x 版本作為主版本 No major version for 0.x.x
allow_zero_version = false        # 不允許 0.x.x 版本 Do not allow 0.x.x versions
build_command = ""                # 清空建置指令，在 GitHub Actions 中處理
# 建置指令 Build command
assets = []                       # 附加檔案 Additional assets
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
# 提交訊息格式 Commit message format
commit_parser = "conventional"    # 提交訊息解析器 Commit message parser, conventional = angular
logging_use_named_masks = false   # 日誌輸出設定 Logging configuration
commit = true                     # 確保提交版本變更
push = true                       # 確保推送版本變更


# 允許發布的分支 Branches allowed for release

# main: 不建立預發布版本 Do not create pre-release versions
[tool.semantic_release.branches.main]
match = "main"
prerelease = false

# dev: 建立預發布版本 Create pre-release versions
[tool.semantic_release.branches.dev]
match = "dev"
prerelease = true
prerelease_token = "rc"

# 變更日誌生成設定 Changelog generation settings
[tool.semantic_release.changelog]
template_dir = ".release/changelog-templates"  # 變更日誌模板目錄 Changelog templates directory
exclude_commit_patterns = []    # 排除的提交模式 Excluded commit patterns
mode = "update"                 # 更新模式 Update mode
insertion_flag = "<!-- version list -->"  # 插入標記 Insertion flag

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md" # 變更日誌檔案 Changelog file path
output_format = "md"            # 輸出格式 Output format
mask_initial_release = true     # 遮蔽初始發佈 Mask initial release

# 模板引擎設定 Template engine configurations
[tool.semantic_release.changelog.environment]
block_start_string = "{%"     # 模板區塊起始符號 Template block start
block_end_string = "%}"       # 模板區塊結束符號 Template block end
variable_start_string = "{{"  # 變數起始符號 Variable start
variable_end_string = "}}"    # 變數結束符號 Variable end
comment_start_string = "{#"   # 註解起始符號 Comment start
comment_end_string = "#}"     # 註解結束符號 Comment end
trim_blocks = false           # 是否移除尾隨換行 Remove trailing newlines
lstrip_blocks = false         # 是否移除前導空白 Strip leading whitespace
newline_sequence = "\n"       # 換行符號 Newline sequence
keep_trailing_newline = false # 保留尾隨換行 Keep trailing newline
extensions = []               # 附加模板擴展 Additional template extensions
autoescape = true             # 自動轉義變數 Auto-escape variables

# 提交作者設定 Commit author configuration
[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"                       # 環境變數名稱 Environment variable
default = "semantic-release <semantic-release>" # 預設作者 Default author

# 提交訊息解析設定 Commit message parsing configuration
[tool.semantic_release.commit_parser_options]
allowed_tags = [ # 支援的提交類型 Supported commit types
	"feat",     # 新功能 A new feature
	"fix",      # 錯誤修復 A bug fix
	"docs",     # 僅文檔變更 Documentation only changes
	"style",    # 不影響代碼含義的變更 Changes that do not affect the meaning of the code
	"refactor", # 既不修復錯誤也不增加功能的代碼變更 A code change that neither fixes a bug nor adds a feature
	"perf",     # 提高性能的代碼變更 A code change that improves performance
	"test",     # 增加或修正現有測試 Adding missing or correcting existing tests
	"chore",    # 構建過程或輔助工具的變更 Changes to the build process or auxiliary tools
	"build",    # 影響構建系統的變更 Changes that affect the build system
	"ci",       # CI 配置文件和腳本的變更 Changes to CI configuration files and scripts
]
minor_tags = ["feat"] # 觸發次版本更新的類型 Tags for minor version bump
patch_tags = ["fix", "perf"] # 觸發修補版本更新的類型 Tags for patch version bump
default_bump_level = 0 # 預設更新級別 Default bump level (0: patch, 1: minor, 2: major)

# GitHub 倉庫設定 GitHub repository settings
[tool.semantic_release.remote]
name = "origin"               # 遠端名稱 Remote name
type = "github"               # 倉庫類型 Repository type
ignore_token_for_push = false # 推送時不忽略認證令牌 Do not ignore token for push

# GitHub 認證令牌設定 GitHub authentication token settings
[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"

# 版本設定 Version configuration
[tool.semantic_release.version]
source = "commit"  # 從提交訊息自動決定版本
version_toml = [
    "pyproject.toml:project.version"  # 自動更新檔案中的版本
]

# 發布設定 Publishing configuration
[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"] # 發布檔案模式 Distribution file patterns
upload_to_vcs_release = true    # 上傳到版本控制系統 Upload to VCS releases

# pytest 配置 pytest configuration
[tool.pytest.ini_options]
markers = [
    "stress: Stress test marker, used to identify tests requiring significant resources",
    "stress_zh: 壓力測試標記，用於標識需要大量資源的測試",
    "excel: Excel file test marker, used to identify tests requiring openpyxl",
    "excel_zh: Excel 檔案測試標記，用於標識需要 openpyxl 的測試"
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

# pytest-cov 配置 pytest-cov configuration
[tool.coverage.run]
source = ["petsard"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]
show_missing = true
precision = 2
