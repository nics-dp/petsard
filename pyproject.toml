[project]
name = "petsard"
version = "1.2.1"
description = "Facilitates data generation algorithm and their evaluation processes"
authors = [
    { name = "alexchen830", email = "alexchen830@gmail.com" },
    { name = "matheme-justyn", email = "matheme.justyn@gmail.com" },
]
readme = "README.md"
requires-python = ">=3.10,<3.12" # anonymeter only support ">=3.10,<3.12"
# dateutil for DateEncoder
# dateutil for DateEncoder
dependencies = [
    "anonymeter>=1.0.0,<2",
    "jinja2>=3.1.6",
    "python-dateutil>=2.9.0.post0",
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
    "sdmetrics>=0.18.0,<1",
    "sdv>=1.17.4,<2",
]

[dependency-groups]
dev = [
    "hatchling>=1.27.0",
    "ipykernel>=6.29.5",
    "pytest>=8.3.4",
    "python-semantic-release>=9.18.0",
    "ruff>=0.9.5",
]

[build-system]
# Specifies Hatchling as the build tool for creating distributions
requires = ["hatchling"]
# Uses Hatchling's build backend for package building
build-backend = "hatchling.build"

[tool.semantic_release]
# Format for version tags and releases
tag_format = "v{version}"
# Not allow 0.x.x version numbers for early development
major_on_zero = false
allow_zero_version = false
# Command to build distribution packages (creates dist/ directory)
build_command = "pip install build && python -m build"
# Specifies additional files to be included in releases
# Empty array means no additional assets will be included
assets = []
# Template for the automatic commit message created when version is bumped
# {version} will be replaced with the new version number
# Example: "2.1.0\n\nAutomatically generated by python-semantic-release"
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
# Specifies the commit message convention to parse
# 'angular' follows the Angular commit message format
# Example: feat(scope): message or fix(scope): message
commit_parser = "angular"
# When false, simplifies log output by disabling named masks in logging
# Affects only the development/debugging logs, not the changelog
logging_use_named_masks = false
# List of files and locations where version numbers should be updated
# Format: "file_path:version_location"
# Here it will update the version in pyproject.toml under project.version
version_variable = [
   "pyproject.toml:project.version",
]
# tag for use GitHub tag, commit for use pyproject.toml
version_source = "commit"

# Main branch release configuration
[tool.semantic_release.branches.main]
match = "main"
prerelease = false  # Do not create pre-release versions
prerelease_token = "rc"

# Changelog generation settings
[tool.semantic_release.changelog]
# Specify the path to custom templates directory
template_dir = "templates"
# Specify the changelog file to be updated
changelog_file = "CHANGELOG.md"
# Patterns of commits to exclude from changelog
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
# Template engine configurations (Jinja2 syntax)
# Start delimiter for template blocks
block_start_string = "{%"
# End delimiter for template blocks
block_end_string = "%}"
# Start delimiter for variables
variable_start_string = "{{"
# End delimiter for variables
variable_end_string = "}}"
# Start delimiter for comments
comment_start_string = "{#"
# End delimiter for comments
comment_end_string = "#}"
# Whether to remove trailing newlines in blocks
trim_blocks = false
# Whether to strip leading whitespace from lines
lstrip_blocks = false
# Sequence used for newlines
newline_sequence = "\n"
# Whether to keep trailing newlines
keep_trailing_newline = false
# Additional template extensions
extensions = []
# Enable auto-escaping of variables
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

# Commit message parsing configuration
[tool.semantic_release.commit_parser_options]
# Supported commit types
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
# feat commits trigger minor version bump (1.x.0)
minor_tags = ["feat"]
# fix and perf commits trigger patch version bump (1.1.x)
patch_tags = ["fix", "perf"]
# Default bump level if no explicit version bump is found (0: patch, 1: minor, 2: major)
default_bump_level = 0

# GitHub repository settings
[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

# Publishing configuration
[tool.semantic_release.publish]
# Files to be uploaded to GitHub releases
dist_glob_patterns = ["dist/*"]
# Enable uploading built files to GitHub releases
upload_to_vcs_release = true
